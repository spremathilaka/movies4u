apply plugin: 'com.android.application'

apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'



android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.zotikos.m4u"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.zotikos.m4u.util.MockRunner"
    }

    dataBinding {
        enabled = true
    }

    androidExtensions {
        experimental = true
    }

    buildTypes {
        debug {
            buildConfigField 'String', "API_KEY", "\"\""
            buildConfigField("long", "NETWORK_DELAY", "0")
        }

        release {
            buildConfigField 'String', "API_KEY", "\"\""
            buildConfigField("long", "NETWORK_DELAY", "0")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        String sharedTestJavaDir = 'src/sharedTest/java'

        test {
            java.srcDirs += [sharedTestJavaDir]
            resources.srcDirs += ['src/sharedTest/resources']
        }

        androidTest {
            java.srcDirs += [sharedTestJavaDir]
            resources.srcDirs += ['src/sharedTest/resources']
        }
       // main { java.srcDirs = ['src/main/java', 'src/sharedTest/java/'] }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    //android -ktx
    implementation "androidx.core:core-ktx:$android_ktx_core_version"
    implementation "androidx.fragment:fragment-ktx:$android_ktx_fragment_version"

    implementation "com.google.android.material:material:$material_version"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"

    //card view
    implementation "androidx.cardview:cardview:$cardview_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0'
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
   // implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    //implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    implementation "androidx.navigation:navigation-fragment:$nav_version" // For Kotlin use navigation-fragment-ktx
    //implementation "android.arch.navigation:navigation-fragment-ktx:$navigation_ktx"	//androidx.navigation.fragment

    implementation "androidx.navigation:navigation-ui:$nav_version" // For Kotlin use navigation-ui-ktx
     //implementation "android.arch.navigation:navigation-ui-ktx:$navigation_ktx"      //androidx.navigation.ui


     //implementation "android.arch.navigation:navigation-common-ktx:$navigation_ktx"	//androidx.navigation
    //implementation "android.arch.navigation:navigation-runtime-ktx:$navigation_ktx"	//androidx.navigation
   // implementation "android.arch.navigation:navigation-testing-ktx:$navigation_ktx"	//androidx.navigation.testing




    //Gson
    implementation "com.google.code.gson:gson:$gson_version"

    //moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    //kapt "com.squareup.moshi:moshi-kotlin-codegen:${moshi_kotlin_version}"

    // Retrofit
    implementation("com.squareup.retrofit2:retrofit:$retrofit_version") {
        // exclude Retrofitâ€™s OkHttp peer-dependency module and define your own module import
        exclude module: 'okhttp'
    }
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    // implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okio:okio:$okio_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_loggin_version"

    implementation "com.squareup.picasso:picasso:$picasso_version"
    //implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:$okhttp3Downloader_version"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxadroid_version"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"
    compileOnly "org.glassfish:javax.annotation:3.1.1"

    implementation "com.google.dagger:dagger-android:$dagger2_version"
    implementation "com.google.dagger:dagger-android-support:$dagger2_version"// if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:$dagger2_version"

    //Logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_idling_resources_version"

    //Unit testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger2_version"
    kaptTest "com.google.dagger:dagger-android-processor: $dagger2_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mock_webserver_version"


    //UI Testing
    // Core library
    androidTestImplementation "androidx.test:core:$test_core_version"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$test_runner_version"
    androidTestImplementation "androidx.test:rules:$test_rule_version"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_contrib_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_intents_version"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_idling_resources_version"

    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger2_version"
    kaptAndroidTest "com.google.dagger:dagger-android-processor: $dagger2_version"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mock_webserver_version"
    androidTestImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'


}

//increase the number of errors that javac will print.
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}
